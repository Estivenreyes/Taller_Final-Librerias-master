const dress_shape = "M83.0151 1C82.3554 6.21818 79.7168 16.0023 71.8011 25.1341C53.331 46.0068 22.9874 40.1364 21.6681 40.1364C21.6681 47.3114 22.3277 54.4864 22.3277 61.6614C23.647 65.575 24.9663 71.4455 27.6049 79.2727C33.5417 97.5364 34.2013 99.4932 34.861 104.711C35.5206 117.105 30.2434 126.236 28.2645 130.15C23.647 138.63 19.6891 139.934 13.7523 146.457C0.559418 163.416 0.559418 184.941 1.21906 196.03C1.87871 210.38 5.17693 222.773 9.1348 231.905C42.1171 250.82 74.4397 269.084 107.422 288C108.741 265.17 109.401 241.036 108.741 216.25C108.741 197.986 108.741 191.464 107.422 182.332C106.762 173.852 103.464 152.98 93.5694 127.541C92.9097 126.889 90.9308 124.28 90.9308 120.366C90.2711 115.8 92.2501 112.539 92.9097 110.582C95.5483 104.711 96.208 97.5364 98.8465 91.6659C98.8465 91.6659 102.145 82.5341 105.443 63.6182C108.741 42.7455 106.762 20.5682 104.783 6.21818C96.8676 4.91364 90.2712 2.95682 83.0151 1Z";
const scarf_shape = "M30.0789 4.89855C26.239 4.89855 23.0391 4.25071 23.0391 4.25071C19.1993 2.95505 17.9193 1.01155 16.6394 1.65938C13.4395 2.30722 12.7995 8.78555 12.7995 11.3769C12.7995 13.3204 12.7995 14.616 12.7995 15.2639C11.5196 15.2639 8.31969 15.9117 5.11981 18.503C0.639977 22.39 0 28.2205 0 29.5162C2.5599 31.4597 5.11981 32.7554 8.31968 34.6989C21.7592 41.1772 35.1987 39.2337 41.5984 37.938C42.8784 45.712 43.5184 54.7817 43.5184 63.8514C44.1583 93.6517 38.3986 118.269 32.6388 137.704C38.3986 138.352 44.1583 138.352 50.5581 139C54.398 125.396 57.5978 106.608 57.5978 83.9342C57.5978 65.7949 55.0379 50.2469 52.478 37.938C55.6779 40.5294 58.2378 43.7685 60.7977 48.3034C74.2372 70.3297 65.9175 96.243 63.9976 102.721C68.4774 102.721 72.9573 102.721 77.4371 102.721C79.357 97.5387 83.1969 83.2864 79.357 66.4427C74.8772 49.599 65.2775 39.2337 61.4377 35.3467C63.9976 33.4032 65.9175 31.4597 68.4774 30.164C67.8374 28.2205 66.5575 23.6857 62.7176 19.7987C59.5178 16.5595 55.6779 15.9117 53.758 15.2639C52.478 4.25071 49.9181 1.01155 47.9982 0.363717C42.2384 -1.57978 39.0385 4.89855 30.0789 4.89855Z";
const poncho_shape = "M55.8544 1C53.9098 2.27473 51.9652 4.82418 49.3723 7.37363C45.4831 13.1099 44.1866 18.2088 43.5384 22.033C32.5189 24.5824 24.7404 28.4066 19.5547 30.956C13.7208 34.1429 8.53511 37.3297 4.64586 43.7033C3.34944 45.6154 2.05302 48.8022 1.40481 57.7253C-0.53982 76.8461 5.29407 85.7692 2.70123 104.253C2.05302 106.802 2.05302 108.714 2.05302 109.989C18.2583 113.813 39.6492 117 64.2811 117C90.2095 117 112.249 113.813 129.102 109.989C125.861 90.8681 127.157 75.5714 128.454 64.7363C129.75 55.8132 131.695 48.1648 127.157 40.5165C123.268 34.1429 116.786 31.5934 109.008 27.7692C100.581 23.9451 92.8024 22.6703 87.6167 21.3956C87.6167 19.4835 87.6167 15.022 85.6721 10.5604C83.7274 6.0989 80.4864 2.91209 78.5417 1.63737C77.2453 2.27473 72.7079 4.82418 66.874 4.18681C61.0401 4.18681 57.1508 1.63736 55.8544 1Z";
const jacket_shape = "M62.0223 15.6134C64.619 24.0407 67.2157 35.7093 67.2157 49.3227C66.5666 79.7907 52.2847 102.48 45.793 111.555C43.8455 102.48 41.2488 92.7558 39.3013 83.6802C39.9504 87.5698 45.1438 119.983 39.9504 142.672C38.6521 149.802 36.0554 155.637 36.0554 155.637C32.1603 166.657 28.2653 173.14 25.6686 178.326C22.4227 185.456 18.5277 195.828 17.2293 210.09C15.931 211.387 13.9835 212.683 10.7376 213.98C6.19339 215.276 2.29835 214.628 1 214.628C5.54422 204.904 7.49174 195.828 8.79008 189.994C10.0884 183.512 11.3868 173.14 12.036 162.767C12.6851 157.581 12.6851 154.34 13.9835 149.154C15.2818 142.023 17.8785 136.837 19.826 132.948C20.4752 112.852 19.1769 96.6453 17.2293 85.625C15.2818 74.6047 12.036 59.6948 17.8785 44.1366C20.4752 37.6541 23.0719 34.4128 23.7211 33.1163C28.2653 27.9302 34.757 25.3372 47.0913 20.1512C54.8814 17.5581 58.1273 16.2616 61.3732 12.3721C63.9699 9.13081 65.2682 5.24128 65.9174 2C67.8649 3.29651 72.4091 5.88953 78.9009 5.88953C85.3926 5.88953 89.9368 3.29651 91.2352 2C90.586 4.59302 89.9368 8.48256 91.8843 11.7238C95.1302 16.9099 102.271 18.8546 104.868 19.5029C112.658 21.4477 123.694 25.9855 139.274 40.2471C139.923 51.9157 139.923 61.6395 140.572 68.1221C141.222 89.5145 140.572 99.8866 141.222 123.224C141.222 132.299 141.871 139.43 141.871 143.968C141.871 147.209 142.52 149.802 142.52 153.044C143.169 162.767 143.818 167.305 143.818 170.547C144.467 181.567 143.169 184.808 143.169 197.773C143.169 204.256 143.169 213.331 143.818 225C141.871 224.352 137.976 222.407 134.73 217.869C132.133 214.628 130.835 211.387 130.186 207.497C128.238 202.311 128.238 199.07 127.589 193.884C126.94 188.049 125.641 184.16 123.694 177.677C121.097 166.657 119.799 166.657 118.5 160.174C117.851 156.933 117.851 154.34 117.202 141.375C117.202 129.058 117.202 120.631 117.202 107.017C117.202 99.8866 117.851 94.0523 117.851 90.1628C115.904 98.5901 114.605 107.017 112.658 115.445C105.517 110.907 100.973 106.369 97.7269 101.831C73.7075 70.0669 91.8843 24.0407 94.481 18.8546C93.8319 18.2064 91.2352 16.2616 89.9368 13.0203C89.2876 11.0756 89.2876 9.77907 89.2876 8.48256C86.6909 9.13081 82.7959 9.77907 77.6025 9.77907C73.0583 9.77907 69.1632 8.48256 66.5666 7.8343C66.5666 9.13081 65.9174 11.0756 64.619 13.0203C63.9699 13.6686 62.6715 14.9651 62.0223 15.6134Z";
const hood_shape = "M122.697 117.129C116.209 106.112 101.288 99.6317 98.044 98.3355C88.3124 94.4472 81.176 94.4472 77.9321 87.9665C76.6346 85.3743 75.9858 82.1339 75.337 78.2456C75.337 75.0052 75.337 72.413 75.9858 70.4688C74.6883 71.7649 73.3907 72.413 72.742 72.413C68.2006 75.0052 64.308 76.3014 61.7129 76.3014C59.1178 76.3014 50.035 74.3572 42.8986 65.9323C41.601 64.6362 33.167 54.2672 36.4109 45.1943C39.006 38.7137 44.8449 39.3617 53.9276 28.9927C57.1715 25.1043 59.7666 21.864 61.0641 19.9198C61.7129 21.2159 63.6592 23.1601 65.6055 25.1043C76.6346 36.7695 83.1223 37.4175 85.0686 44.5462C87.0149 50.3788 85.0686 56.8595 83.771 59.4517C82.4735 62.692 80.5272 65.2843 77.9321 67.8765C79.2297 67.2285 79.8784 65.9323 81.176 64.6362C87.0149 58.1556 88.3124 51.0269 90.2587 36.7695C92.205 22.5121 90.9075 19.2717 90.2587 17.9756C87.6636 11.495 81.8247 8.90272 77.9321 6.31047C74.0395 3.71821 65.6055 -0.818238 54.5764 1.77402C45.4937 3.71821 40.3035 10.1988 39.006 11.495C35.1134 17.3276 34.4646 22.5121 33.8158 33.5292C32.5183 49.0827 31.8695 60.0998 39.006 67.2285C42.2498 69.8207 45.4937 71.1169 47.44 71.7649C47.44 74.3572 47.44 77.5975 46.1424 82.1339C42.8986 91.2068 34.4646 95.7433 29.9232 98.3355C20.1917 103.52 16.299 101.576 11.1089 104.816C5.26997 108.705 -0.568957 118.426 2.02612 144.996C7.86504 144.996 15.6503 143.7 23.4355 140.46C51.3326 129.443 61.0641 101.576 63.6592 95.7433C64.9567 100.928 67.5518 106.76 70.7957 112.593C86.3661 137.867 114.263 145.644 122.697 147.588C125.941 139.812 128.536 127.498 122.697 117.129Z";
const clothPath = document.querySelector("#clothPath");
const color1 = document.getElementById("color1");
const color2 = document.getElementById("color2");
const color3 = document.getElementById("color3");
const color4 = document.getElementById("color4");
const color5 = document.getElementById("color5");
const color6 = document.getElementById("color6");
const colors = document.getElementById("colors");
let animeOrder = 0;
let animateScarf;

color1.addEventListener('click', () => {
    anime({
        targets: '#clothPath path',
        strokeDashoffset: [anime.setDashoffset, 0],
        fill: '#FF6F6F',
        easing: 'easeInOutSine',
        duration: 200,
        delay: function (el, i) {
            return i * 250
        },
        direction: 'linear',
        loop: false
    });
})
color2.addEventListener('click', () => {
    anime({
        targets: '#clothPath path',
        strokeDashoffset: [anime.setDashoffset, 0],
        fill: '#76E6FF',
        easing: 'easeInOutSine',
        duration: 200,
        delay: function (el, i) {
            return i * 250
        },
        direction: 'linear',
        loop: false
    });
})
color3.addEventListener('click', () => {
    anime({
        targets: '#clothPath path',
        strokeDashoffset: [anime.setDashoffset, 0],
        fill: '#FFFA76',
        easing: 'easeInOutSine',
        duration: 200,
        delay: function (el, i) {
            return i * 250
        },
        direction: 'linear',
        loop: false
    });
})
color4.addEventListener('click', () => {
    anime({
        targets: '#clothPath path',
        strokeDashoffset: [anime.setDashoffset, 0],
        fill: '#8AC74E',
        easing: 'easeInOutSine',
        duration: 200,
        delay: function (el, i) {
            return i * 250
        },
        direction: 'linear',
        loop: false
    });
})
color5.addEventListener('click', () => {
    anime({
        targets: '#clothPath path',
        strokeDashoffset: [anime.setDashoffset, 0],
        fill: '#FFA4C7',
        easing: 'easeInOutSine',
        duration: 200,
        delay: function (el, i) {
            return i * 250
        },
        direction: 'linear',
        loop: false
    });
})
color5.addEventListener('click', () => {
    anime({
        targets: '#clothPath path',
        strokeDashoffset: [anime.setDashoffset, 0],
        fill: '#FFA4C7',
        easing: 'easeInOutSine',
        duration: 200,
        delay: function (el, i) {
            return i * 250
        },
        direction: 'linear',
        loop: false
    });
})
color6.addEventListener('click', () => {
    anime({
        targets: '#clothPath path',
        strokeDashoffset: [anime.setDashoffset, 0],
        fill: '#BA89EC',
        easing: 'easeInOutSine',
        duration: 200,
        delay: function (el, i) {
            return i * 250
        },
        direction: 'linear',
        loop: false
    });
})

clothPath.addEventListener('click', () => {
    const timeline = anime.timeline({
        duration: 750,
        easing: "easeOutExpo"
    });
    switch (animeOrder) {
        case 0:
            animateScarf = anime({
                targets: ".cloth",
                d: [
                    { value: dress_shape },
                ],
                translateX: -15,
                translateY: 5,
            });
            animeOrder++;
            break;
        case 1:
            animateScarf = anime({
                targets: ".cloth",
                d: [
                    { value: poncho_shape },
                ],
                translateY: -4,
            });
            animeOrder++;
            break;
        case 2:
            animateScarf = anime({
                targets: ".cloth",
                d: [
                    { value: jacket_shape },
                ],
                translateX: -22,
                translateY: -2,
            });
            animeOrder++;
            break;
        case 3:
            animateScarf = anime({
                targets: ".cloth",
                d: [
                    { value: hood_shape },
                ],
                translateX: -14,
                translateY: -40,
            });
            animeOrder++;
            break;
        case 4:
            animateScarf = anime({
                targets: ".cloth",
                d: [
                    { value: scarf_shape },
                ],
                translateX: 0,
                translateY: 0,
            });
            animeOrder = 0;
            break;

    }
});

